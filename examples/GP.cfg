<experiment>
	<process algorithm-type="net.sf.jclec.algorithm.classic.SG">
		<population-size>300</population-size>
		<max-of-generations>300</max-of-generations>
		<rand-gen-factory type="net.sf.jclec.util.random.RanecuFactory" seed="12346758"/>
		<species type="net.sf.jclec.syntaxtree.SyntaxTreeIndividualSpecies">
			<max-deriv-size>100</max-deriv-size>
			<grammar-file>C:\Users\i22balur\Documents\workspace\grammatical-evolution\jclec4-tutorial\examples\grammar\grammar.xml</grammar-file>
			<code-file>C:\Users\i22balur\Documents\workspace\grammatical-evolution\jclec4-tutorial\examples\grammar\code.xml</code-file>
		</species>
		<evaluator type="tutorial.symreg.DataProEvaluator">
			<data-file>C:\Users\i22balur\Documents\workspace\grammatical-evolution\jclec4-tutorial\examples\data\benchmarkt.xlsx</data-file>		
		</evaluator>
		<provider type="net.sf.jclec.syntaxtree.SyntaxTreeCreator"/>
		<parents-selector type="net.sf.jclec.selector.TournamentSelector" tournament-size="2"/>
		<recombinator type="net.sf.jclec.syntaxtree.SyntaxTreeRecombinator" rec-prob="0.75">
			<base-op type="net.sf.jclec.syntaxtree.rec.NTCrossover" />			
		</recombinator>
		<mutator type="net.sf.jclec.syntaxtree.SyntaxTreeMutator" mut-prob="0.10">
			<base-op type="net.sf.jclec.syntaxtree.mut.NTMutator" />
		</mutator>
		<!-- Listener -->
		<listener type="net.sf.jclec.listener.PopulationReporter">
			<report-title>SyntaxSymReg</report-title>
			<report-frequency>1</report-frequency>
			<report-on-console>true</report-on-console>
			<report-on-file>false</report-on-file>
			<save-complete-population>false</save-complete-population>
		</listener>	
	</process>
</experiment>
